create_instance.tf:

provider "aws" {
access_key = "access_key_here"
secret_key = "secret_key_here"
region = "us-east-1"
}

resource "aws_instance" "myfirst_instance" {
    ami = "ami-0b0ea68c435eb488d"
    instance_type = "t2.micro"
}

terraform init
terraform plan
terrafrom apply
terraform destroy

----------------------------------------------------

Creating seperate provider.tf centralised file so that credentials do not need to be stored in each configuration files and can be utilsed in different environments:

provide.tf:

provider "aws" {
access_key = "access_key"
secret_key = "secret_key"
region = "us-east-1"
}

  create_instance.tf

  resource "aws_instance" "myfirst_instance" {
    ami = "ami-0b0ea68c435eb488d"
    instance_type = "t2.micro"
}

--------------------------------------------------

  providing credentials as environment variables, to make it independent of directory structure:
  
type below commands on CLI:
export AWS_ACCESS_KEY_ID="access_key"
export AWS_SECRET_ACCESS_KEY="secret_key"
export AWS_DEFAULT_REGION="us-east-1"

env | grep -i aws
printenv

---------------------------------------------------------
Creating multiple instances:
resource "aws_instance" "myfirst_instance" {
    count = 3
    ami = "ami-0b0ea68c435eb488d"
    instance_type = "t2.micro"

    tags = {
      Name = "demo_instance-${count.index}"                           (to provide unique names to each instance)
    }
}

----------------------------------------------------------------

Note:
- If we have flexible configuration file, we can pass the environment specific configuration at the runtime.
Using Terraform input variables is one of the way of deploying development, 
staging or production environments using the same terraform resource declarations, with slightly different configuration.

- Variables are necessary to parameterizing our deployments using terraform.
- Use variables to manage the secret.
- Use variables for dynamic elemnets like AMI, for this we have to use maps data type as variable as AMI's are regional scoped.
- variables makes files flexible and env independent.
- to avoid particular file (eg: terraform.tfvars) in GitHub repository, we have to include that file in gitignore.

create_instance.tf:

resource "aws_instance" "myfirst_instance" {
    ami = "ami-0b0ea68c435eb488d"
    instance_type = "t2.micro"

    tags = {
      Name = "demo_instance"
    }
}

provider.tf:

provider "aws" {
access_key = "${var.AWS_ACCESS_KEY}"
secret_key = "${var.AWS_SECRET_KEY}"
region = "${var.AWS_REGION}"
}

variables.tf:
- defining the blank values for access and secret key

variable "AWS_ACCESS_KEY" {}
variable "AWS_SECRET_KEY" {}
variable "AWS_REGION" {
default = "us-east-1"
}

- We can pass these credentials at run time when prompted or 
-We can mention the variables with execution command itself as below:
terraform plan -var AWS_ACCESS_KEY="access_ket_here" -var AWS_SECRET_KEY="secret_key here"
- Or we can define the variables as defined in below file:

vi terraform.tfvars

AWS_ACCESS_KEY="access_key_here"
AWS_SECRET_KEY="secret_key_here"

--------------------------------------------------------------------------------------------------------

Lists and Maps:

Providing lists of security group:
variables.tf:

variable "AWS_ACCESS_KEY" {}
variable "AWS_SECRET_KEY" {}
variable "AWS_REGION" {
default = "us-east-1"
}

variable "Security_Group"{
  type = "list"
  default = ["sg-12334", "sg-12333", sg-1878]
}


create_instance.tf:

resource "aws_instance" "myfirst_instance" {
    ami = "ami-0b0ea68c435eb488d"
    instance_type = "t2.micro"

    tags = {
      Name = "demo_instance"
    }
    security_groups = "${var.Security_Group}"
}
----------------------------------------------------------------------------

Map variables:
suppose we need to choose between regions then AMI which is region specifuc cannot be given as hardcoded values,
we have to define them as map variables:
It should be provided as key value pairs, where key should be aws region and value is AMI.

note: google AWS AMI locator to find the AMIs in specific regions.

variables.tf:

variable "AWS_ACCESS_KEY" {}
variable "AWS_SECRET_KEY" {}
variable "AWS_REGION" {
default = "us-east-1"
}

variable "Security_Group"{
  type = "list"
  default = ["sg-12334", "sg-12333", sg-1878]
}

variable "AMIS" {
  type = map
  default ={
    us-east-1 = "ami_of_us-east-1_here"
    us-east-2 = "ami_of_us-east-2_here"
    us-west-1 = "ami_of_us-west-1_here"
    us-west-2 = "ami_of_us-west-2_here"
  }
}

lookup fuction will search the value aws region inside the variable AWS AMIS:
create_instance.tf

resource "aws_instance" "myfirst_instance" {
    ami = "lookup(var.AMIS, var.AWS_REGION)"
    instance_type = "t2.micro"

    tags = {
      Name = "demo_instance"
    }
    security_groups = "${var.Security_Group}"
}

terraform plan -var AWS_REGION="us-west-2"
--------------------------------------------------------------------------------------------------------








